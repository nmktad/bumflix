// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package bumflixdb

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteFilm = `-- name: DeleteFilm :exec
DELETE FROM films
WHERE id = $1
`

func (q *Queries) DeleteFilm(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFilm, id)
	return err
}

const getFilm = `-- name: GetFilm :one
SELECT id, title, slug, year, source_key, transcoded_prefix, status, created_at FROM films
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFilm(ctx context.Context, id pgtype.UUID) (Film, error) {
	row := q.db.QueryRow(ctx, getFilm, id)
	var i Film
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Year,
		&i.SourceKey,
		&i.TranscodedPrefix,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const insertFilm = `-- name: InsertFilm :one
INSERT INTO films (
  title, slug, source_key
) VALUES (
  $1, $2, $3
)
RETURNING id, title, slug, year, source_key, transcoded_prefix, status, created_at
`

type InsertFilmParams struct {
	Title     string
	Slug      string
	SourceKey string
}

func (q *Queries) InsertFilm(ctx context.Context, arg InsertFilmParams) (Film, error) {
	row := q.db.QueryRow(ctx, insertFilm, arg.Title, arg.Slug, arg.SourceKey)
	var i Film
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Year,
		&i.SourceKey,
		&i.TranscodedPrefix,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listFilms = `-- name: ListFilms :many
SELECT id, title, slug, year, source_key, transcoded_prefix, status, created_at FROM films
ORDER BY created_at
`

func (q *Queries) ListFilms(ctx context.Context) ([]Film, error) {
	rows, err := q.db.Query(ctx, listFilms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Film
	for rows.Next() {
		var i Film
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Year,
			&i.SourceKey,
			&i.TranscodedPrefix,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFilm = `-- name: UpdateFilm :exec
UPDATE films
  set title = $2,
  year = $3,
  transcoded_prefix = $4
WHERE id = $1
`

type UpdateFilmParams struct {
	ID               pgtype.UUID
	Title            string
	Year             pgtype.Int4
	TranscodedPrefix pgtype.Text
}

func (q *Queries) UpdateFilm(ctx context.Context, arg UpdateFilmParams) error {
	_, err := q.db.Exec(ctx, updateFilm,
		arg.ID,
		arg.Title,
		arg.Year,
		arg.TranscodedPrefix,
	)
	return err
}
